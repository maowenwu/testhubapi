<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huobi.quantification.dao.QuanOrderMapper">
  <resultMap id="BaseResultMap" type="com.huobi.quantification.entity.QuanOrder">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="order_source_id" jdbcType="BIGINT" property="orderSourceId" />
    <result column="order_symbol" jdbcType="VARCHAR" property="orderSymbol" />
    <result column="order_type" jdbcType="VARCHAR" property="orderType" />
    <result column="order_state" jdbcType="VARCHAR" property="orderState" />
    <result column="order_account_id" jdbcType="BIGINT" property="orderAccountId" />
    <result column="order_amount" jdbcType="DECIMAL" property="orderAmount" />
    <result column="order_field_amount" jdbcType="DECIMAL" property="orderFieldAmount" />
    <result column="order_field_cash_amount" jdbcType="DECIMAL" property="orderFieldCashAmount" />
    <result column="order_field_fees" jdbcType="DECIMAL" property="orderFieldFees" />
    <result column="order_price" jdbcType="DECIMAL" property="orderPrice" />
    <result column="order_source" jdbcType="VARCHAR" property="orderSource" />
    <result column="order_created_at" jdbcType="TIMESTAMP" property="orderCreatedAt" />
    <result column="order_canceled_at" jdbcType="TIMESTAMP" property="orderCanceledAt" />
    <result column="order_finished_at" jdbcType="TIMESTAMP" property="orderFinishedAt" />
    <result column="order_inner_id" jdbcType="BIGINT" property="innerId" />
    <result column="exchange_id" jdbcType="INTEGER" property="exchangeId" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from quan_order
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.huobi.quantification.entity.QuanOrder" useGeneratedKeys="true" keyProperty="id">
    insert into quan_order (id, order_source_id, order_symbol, 
      order_type, order_state, order_account_id, 
      order_amount, order_field_amount, order_field_cash_amount, 
      order_field_fees, order_price, order_source, 
      order_created_at, order_canceled_at, order_finished_at, 
      order_inner_id, exchange_id)
    values (#{id,jdbcType=BIGINT}, #{orderSourceId,jdbcType=BIGINT}, #{orderSymbol,jdbcType=VARCHAR}, 
      #{orderType,jdbcType=VARCHAR}, #{orderState,jdbcType=VARCHAR}, #{orderAccountId,jdbcType=BIGINT}, 
      #{orderAmount,jdbcType=DECIMAL}, #{orderFieldAmount,jdbcType=DECIMAL}, #{orderFieldCashAmount,jdbcType=DECIMAL}, 
      #{orderFieldFees,jdbcType=DECIMAL}, #{orderPrice,jdbcType=DECIMAL}, #{orderSource,jdbcType=VARCHAR}, 
      #{orderCreatedAt,jdbcType=TIMESTAMP}, #{orderCanceledAt,jdbcType=TIMESTAMP}, #{orderFinishedAt,jdbcType=TIMESTAMP}, 
      #{innerId,jdbcType=BIGINT}, #{exchangeId,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.huobi.quantification.entity.QuanOrder">
    update quan_order
    set order_source_id = #{orderSourceId,jdbcType=BIGINT},
      order_symbol = #{orderSymbol,jdbcType=VARCHAR},
      order_type = #{orderType,jdbcType=VARCHAR},
      order_state = #{orderState,jdbcType=VARCHAR},
      order_account_id = #{orderAccountId,jdbcType=BIGINT},
      order_amount = #{orderAmount,jdbcType=DECIMAL},
      order_field_amount = #{orderFieldAmount,jdbcType=DECIMAL},
      order_field_cash_amount = #{orderFieldCashAmount,jdbcType=DECIMAL},
      order_field_fees = #{orderFieldFees,jdbcType=DECIMAL},
      order_price = #{orderPrice,jdbcType=DECIMAL},
      order_source = #{orderSource,jdbcType=VARCHAR},
      order_created_at = #{orderCreatedAt,jdbcType=TIMESTAMP},
      order_canceled_at = #{orderCanceledAt,jdbcType=TIMESTAMP},
      order_finished_at = #{orderFinishedAt,jdbcType=TIMESTAMP},
      order_inner_id = #{innerId,jdbcType=BIGINT},
      exchange_id = #{exchangeId,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, order_source_id, order_symbol, order_type, order_state, order_account_id, 
    order_amount, order_field_amount, order_field_cash_amount, order_field_fees, order_price, 
    order_source, order_created_at, order_canceled_at, order_finished_at, order_inner_id, 
    exchange_id
    from quan_order
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, order_source_id, order_symbol, order_type, order_state, order_account_id, 
    order_amount, order_field_amount, order_field_cash_amount, order_field_fees, order_price, 
    order_source, order_created_at, order_canceled_at, order_finished_at, order_inner_id, 
    exchange_id
    from quan_order
  </select>
  


  <select id="selectList" resultMap="BaseResultMap">
    select id, order_source_id, order_symbol, order_type, order_state, order_account_id, 
    order_amount, order_field_amount, order_field_cash_amount, order_field_fees, order_price, 
    order_source, order_created_at, order_canceled_at, order_finished_at, order_inner_id, 
    exchange_id
    from quan_order
    		<where>
			<if test="exchangeId != null">
				and exchange_id=#{exchangeId}
			</if>    		
			<if test="orderAccountId != null">
				and order_account_id=#{orderAccountId}
			</if>
			<if test="orderSourceId != null">
				and order_account_id=#{orderSourceId}
			</if>
			<if test="orderInnerId != null">
				and order_inner_id=#{orderInnerId}
			</if>			
			<if test="orderType != null">
				and order_type=#{orderType}
			</if>
		</where>  
  </select>  
 
</mapper>