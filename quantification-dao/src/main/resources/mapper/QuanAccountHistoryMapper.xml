<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huobi.quantification.dao.QuanAccountHistoryMapper">
  <resultMap id="BaseResultMap" type="com.huobi.quantification.entity.QuanAccountHistory">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="account_id" jdbcType="BIGINT" property="accountId" />
    <result column="coin" jdbcType="VARCHAR" property="coin" />
    <result column="current_amount" jdbcType="DECIMAL" property="currentAmount" />
    <result column="last_amount" jdbcType="DECIMAL" property="lastAmount" />
    <result column="recharge_amount" jdbcType="DECIMAL" property="rechargeAmount" />
    <result column="recharge_type" jdbcType="VARCHAR" property="rechargeType" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from quan_account_history
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.huobi.quantification.entity.QuanAccountHistory">
    insert into quan_account_history (id, account_id, coin, 
      current_amount, last_amount, recharge_amount, 
      recharge_type, create_time)
    values (#{id,jdbcType=BIGINT}, #{accountId,jdbcType=BIGINT}, #{coin,jdbcType=VARCHAR}, 
      #{currentAmount,jdbcType=DECIMAL}, #{lastAmount,jdbcType=DECIMAL}, #{rechargeAmount,jdbcType=DECIMAL}, 
      #{rechargeType,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.huobi.quantification.entity.QuanAccountHistory">
    update quan_account_history
    set account_id = #{accountId,jdbcType=BIGINT},
      coin = #{coin,jdbcType=VARCHAR},
      current_amount = #{currentAmount,jdbcType=DECIMAL},
      last_amount = #{lastAmount,jdbcType=DECIMAL},
      recharge_amount = #{rechargeAmount,jdbcType=DECIMAL},
      recharge_type = #{rechargeType,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, account_id, coin, current_amount, last_amount, recharge_amount, recharge_type, 
    create_time
    from quan_account_history
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, account_id, coin, current_amount, last_amount, recharge_amount, recharge_type, 
    create_time
    from quan_account_history
  </select>
  
  <select id="getInitAmount" resultType="java.math.BigDecimal">
    select sum(current_amount) 
    from quan_account_history
    where account_id=#{accountId}
    and   exchange_id=#{exchangeId}
    and   coin=#{coin}
    order by  id DESC limit 1
  </select>  
</mapper>