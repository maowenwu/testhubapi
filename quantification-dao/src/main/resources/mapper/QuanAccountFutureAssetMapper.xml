<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huobi.quantification.dao.QuanAccountFutureAssetMapper">
    <resultMap id="BaseResultMap" type="com.huobi.quantification.entity.QuanAccountFutureAsset">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="account_future_id" jdbcType="BIGINT" property="accountFutureId"/>
        <result column="query_id" jdbcType="BIGINT" property="queryId"/>
        <result column="coin_type" jdbcType="VARCHAR" property="coinType"/>
        <result column="margin_balance" jdbcType="DECIMAL" property="marginBalance"/>
        <result column="margin_position" jdbcType="DECIMAL" property="marginPosition"/>
        <result column="margin_frozen" jdbcType="DECIMAL" property="marginFrozen"/>
        <result column="margin_available" jdbcType="DECIMAL" property="marginAvailable"/>
        <result column="profit_real" jdbcType="DECIMAL" property="profitReal"/>
        <result column="profit_unreal" jdbcType="DECIMAL" property="profitUnreal"/>
        <result column="risk_rate" jdbcType="DECIMAL" property="riskRate"/>
        <result column="liquidation_price" jdbcType="DECIMAL" property="liquidationPrice"/>
        <result column="init" jdbcType="INTEGER" property="init"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, account_future_id, query_id, coin_type, margin_balance, margin_position, margin_frozen,
    margin_available, profit_real, profit_unreal, risk_rate, liquidation_price, init,
    create_time, update_time
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from quan_account_future_asset
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from quan_account_future_asset
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.huobi.quantification.entity.QuanAccountFutureAsset">
    insert into quan_account_future_asset (id, account_future_id, query_id,
      coin_type, margin_balance, margin_position,
      margin_frozen, margin_available, profit_real,
      profit_unreal, risk_rate, liquidation_price,
      init, create_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{accountFutureId,jdbcType=BIGINT}, #{queryId,jdbcType=BIGINT},
      #{coinType,jdbcType=VARCHAR}, #{marginBalance,jdbcType=DECIMAL}, #{marginPosition,jdbcType=DECIMAL},
      #{marginFrozen,jdbcType=DECIMAL}, #{marginAvailable,jdbcType=DECIMAL}, #{profitReal,jdbcType=DECIMAL},
      #{profitUnreal,jdbcType=DECIMAL}, #{riskRate,jdbcType=DECIMAL}, #{liquidationPrice,jdbcType=DECIMAL},
      #{init,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.huobi.quantification.entity.QuanAccountFutureAsset">
        insert into quan_account_future_asset
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="accountFutureId != null">
                account_future_id,
            </if>
            <if test="queryId != null">
                query_id,
            </if>
            <if test="coinType != null">
                coin_type,
            </if>
            <if test="marginBalance != null">
                margin_balance,
            </if>
            <if test="marginPosition != null">
                margin_position,
            </if>
            <if test="marginFrozen != null">
                margin_frozen,
            </if>
            <if test="marginAvailable != null">
                margin_available,
            </if>
            <if test="profitReal != null">
                profit_real,
            </if>
            <if test="profitUnreal != null">
                profit_unreal,
            </if>
            <if test="riskRate != null">
                risk_rate,
            </if>
            <if test="liquidationPrice != null">
                liquidation_price,
            </if>
            <if test="init != null">
                init,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="accountFutureId != null">
                #{accountFutureId,jdbcType=BIGINT},
            </if>
            <if test="queryId != null">
                #{queryId,jdbcType=BIGINT},
            </if>
            <if test="coinType != null">
                #{coinType,jdbcType=VARCHAR},
            </if>
            <if test="marginBalance != null">
                #{marginBalance,jdbcType=DECIMAL},
            </if>
            <if test="marginPosition != null">
                #{marginPosition,jdbcType=DECIMAL},
            </if>
            <if test="marginFrozen != null">
                #{marginFrozen,jdbcType=DECIMAL},
            </if>
            <if test="marginAvailable != null">
                #{marginAvailable,jdbcType=DECIMAL},
            </if>
            <if test="profitReal != null">
                #{profitReal,jdbcType=DECIMAL},
            </if>
            <if test="profitUnreal != null">
                #{profitUnreal,jdbcType=DECIMAL},
            </if>
            <if test="riskRate != null">
                #{riskRate,jdbcType=DECIMAL},
            </if>
            <if test="liquidationPrice != null">
                #{liquidationPrice,jdbcType=DECIMAL},
            </if>
            <if test="init != null">
                #{init,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.huobi.quantification.entity.QuanAccountFutureAsset">
        update quan_account_future_asset
        <set>
            <if test="accountFutureId != null">
                account_future_id = #{accountFutureId,jdbcType=BIGINT},
            </if>
            <if test="queryId != null">
                query_id = #{queryId,jdbcType=BIGINT},
            </if>
            <if test="coinType != null">
                coin_type = #{coinType,jdbcType=VARCHAR},
            </if>
            <if test="marginBalance != null">
                margin_balance = #{marginBalance,jdbcType=DECIMAL},
            </if>
            <if test="marginPosition != null">
                margin_position = #{marginPosition,jdbcType=DECIMAL},
            </if>
            <if test="marginFrozen != null">
                margin_frozen = #{marginFrozen,jdbcType=DECIMAL},
            </if>
            <if test="marginAvailable != null">
                margin_available = #{marginAvailable,jdbcType=DECIMAL},
            </if>
            <if test="profitReal != null">
                profit_real = #{profitReal,jdbcType=DECIMAL},
            </if>
            <if test="profitUnreal != null">
                profit_unreal = #{profitUnreal,jdbcType=DECIMAL},
            </if>
            <if test="riskRate != null">
                risk_rate = #{riskRate,jdbcType=DECIMAL},
            </if>
            <if test="liquidationPrice != null">
                liquidation_price = #{liquidationPrice,jdbcType=DECIMAL},
            </if>
            <if test="init != null">
                init = #{init,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.huobi.quantification.entity.QuanAccountFutureAsset">
    update quan_account_future_asset
    set account_future_id = #{accountFutureId,jdbcType=BIGINT},
      query_id = #{queryId,jdbcType=BIGINT},
      coin_type = #{coinType,jdbcType=VARCHAR},
      margin_balance = #{marginBalance,jdbcType=DECIMAL},
      margin_position = #{marginPosition,jdbcType=DECIMAL},
      margin_frozen = #{marginFrozen,jdbcType=DECIMAL},
      margin_available = #{marginAvailable,jdbcType=DECIMAL},
      profit_real = #{profitReal,jdbcType=DECIMAL},
      profit_unreal = #{profitUnreal,jdbcType=DECIMAL},
      risk_rate = #{riskRate,jdbcType=DECIMAL},
      liquidation_price = #{liquidationPrice,jdbcType=DECIMAL},
      init = #{init,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="selectByAccountSourceIdCoinType" resultMap="BaseResultMap">
        SELECT
        b.id, b.account_future_id, b.query_id, b.coin_type,b.margin_balance, b.margin_position, b.margin_frozen,
        b.margin_available, b.profit_real, b.profit_unreal, b.risk_rate , b.init, b.create_time, b.update_time
        FROM quan_account_future as a, quan_account_future_asset as b
        where a.id=b.account_future_id and a.account_source_id=#{accountSourceId} and b.coin_type=#{coinType} and
        b.init='1'
    </select>
    <select id="selectByQuanAccountFuture" resultMap="BaseResultMap"
            parameterType="com.huobi.quantification.entity.QuanAccountFuture">
        select
        b.id, b.account_future_id, b.query_id, b.coin_type,b.margin_balance, b.margin_position, b.margin_frozen,
        b.margin_available, b.profit_real, b.profit_unreal, b.risk_rate , b.init, b.create_time, b.update_time
        FROM quan_account_future_asset as b
        left join quan_account_future as a
        on  a.id = b.account_future_id
        where a.account_source_id = #{accountSourceId,jdbcType=BIGINT}
        and a.exchange_id = #{exchangeId,jdbcType=INTEGER}
    </select>

    <select id="selectLastByAccountFutureIdCoinType" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM quan_account_future_asset where
        account_future_id=#{accountFutureId} and
        coin_type=#{coinType}
        order by id desc
        limit 1
    </select>
    <select id="selectInitedAssetByAccountFutureId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM quan_account_future_asset where account_future_id=#{accountFutureId} and init='1'
    </select>
</mapper>