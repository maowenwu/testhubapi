<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huobi.quantification.dao.QuanAccountAssetMapper">
    <resultMap id="BaseResultMap" type="com.huobi.quantification.entity.QuanAccountAsset">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="account_id" jdbcType="BIGINT" property="accountId"/>
        <result column="coin_type" jdbcType="VARCHAR" property="coinType"/>
        <result column="total" jdbcType="DECIMAL" property="total"/>
        <result column="available" jdbcType="DECIMAL" property="available"/>
        <result column="frozen" jdbcType="DECIMAL" property="frozen"/>
        <result column="init" jdbcType="INTEGER" property="init"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, account_id, coin_type, total, available, frozen, init, create_time, update_time
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from quan_account_asset
        where id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from quan_account_asset
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.huobi.quantification.entity.QuanAccountAsset">
    insert into quan_account_asset (id, account_id, coin_type, 
      total, available, frozen, 
      init, create_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{accountId,jdbcType=BIGINT}, #{coinType,jdbcType=VARCHAR}, 
      #{total,jdbcType=DECIMAL}, #{available,jdbcType=DECIMAL}, #{frozen,jdbcType=DECIMAL}, 
      #{init,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.huobi.quantification.entity.QuanAccountAsset">
        insert into quan_account_asset
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="accountId != null">
                account_id,
            </if>
            <if test="coinType != null">
                coin_type,
            </if>
            <if test="total != null">
                total,
            </if>
            <if test="available != null">
                available,
            </if>
            <if test="frozen != null">
                frozen,
            </if>
            <if test="init != null">
                init,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="accountId != null">
                #{accountId,jdbcType=BIGINT},
            </if>
            <if test="coinType != null">
                #{coinType,jdbcType=VARCHAR},
            </if>
            <if test="total != null">
                #{total,jdbcType=DECIMAL},
            </if>
            <if test="available != null">
                #{available,jdbcType=DECIMAL},
            </if>
            <if test="frozen != null">
                #{frozen,jdbcType=DECIMAL},
            </if>
            <if test="init != null">
                #{init,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.huobi.quantification.entity.QuanAccountAsset">
        update quan_account_asset
        <set>
            <if test="accountId != null">
                account_id = #{accountId,jdbcType=BIGINT},
            </if>
            <if test="coinType != null">
                coin_type = #{coinType,jdbcType=VARCHAR},
            </if>
            <if test="total != null">
                total = #{total,jdbcType=DECIMAL},
            </if>
            <if test="available != null">
                available = #{available,jdbcType=DECIMAL},
            </if>
            <if test="frozen != null">
                frozen = #{frozen,jdbcType=DECIMAL},
            </if>
            <if test="init != null">
                init = #{init,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.huobi.quantification.entity.QuanAccountAsset">
    update quan_account_asset
    set account_id = #{accountId,jdbcType=BIGINT},
      coin_type = #{coinType,jdbcType=VARCHAR},
      total = #{total,jdbcType=DECIMAL},
      available = #{available,jdbcType=DECIMAL},
      frozen = #{frozen,jdbcType=DECIMAL},
      init = #{init,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="selectByAccountSourceIdCoinType" resultMap="BaseResultMap">
        SELECT
        a.id, a.account_id, a.coin_type, a.total, a.available, a.frozen, a.init, a.create_time, a.update_time
        FROM quan_account_asset as a,quan_account as b where b.id=a.account_id and
        b.account_source_id=#{accountSourceId} and
        a.coin_type=#{coinType} and init='1'
    </select>
</mapper>