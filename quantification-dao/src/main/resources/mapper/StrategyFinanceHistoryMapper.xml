<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huobi.quantification.dao.StrategyFinanceHistoryMapper">
    <resultMap id="BaseResultMap" type="com.huobi.quantification.entity.StrategyFinanceHistory">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="exchange_id" jdbcType="INTEGER" property="exchangeId"/>
        <result column="account_id" jdbcType="BIGINT" property="accountId"/>
        <result column="coin_type" jdbcType="VARCHAR" property="coinType"/>
        <result column="transfer_amount" jdbcType="DECIMAL" property="transferAmount"/>
        <result column="money_type" jdbcType="INTEGER" property="moneyType"/>
        <result column="init" jdbcType="INTEGER" property="init"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, exchange_id, account_id, coin_type, transfer_amount, money_type, init, create_time, 
    update_time
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from strategy_finance_history
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from strategy_finance_history
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.huobi.quantification.entity.StrategyFinanceHistory">
    insert into strategy_finance_history (id, exchange_id, account_id, 
      coin_type, transfer_amount, money_type, 
      init, create_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{exchangeId,jdbcType=INTEGER}, #{accountId,jdbcType=BIGINT}, 
      #{coinType,jdbcType=VARCHAR}, #{transferAmount,jdbcType=DECIMAL}, #{moneyType,jdbcType=INTEGER}, 
      #{init,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.huobi.quantification.entity.StrategyFinanceHistory">
        insert into strategy_finance_history
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="exchangeId != null">
                exchange_id,
            </if>
            <if test="accountId != null">
                account_id,
            </if>
            <if test="coinType != null">
                coin_type,
            </if>
            <if test="transferAmount != null">
                transfer_amount,
            </if>
            <if test="moneyType != null">
                money_type,
            </if>
            <if test="init != null">
                init,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="exchangeId != null">
                #{exchangeId,jdbcType=INTEGER},
            </if>
            <if test="accountId != null">
                #{accountId,jdbcType=BIGINT},
            </if>
            <if test="coinType != null">
                #{coinType,jdbcType=VARCHAR},
            </if>
            <if test="transferAmount != null">
                #{transferAmount,jdbcType=DECIMAL},
            </if>
            <if test="moneyType != null">
                #{moneyType,jdbcType=INTEGER},
            </if>
            <if test="init != null">
                #{init,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.huobi.quantification.entity.StrategyFinanceHistory">
        update strategy_finance_history
        <set>
            <if test="exchangeId != null">
                exchange_id = #{exchangeId,jdbcType=INTEGER},
            </if>
            <if test="accountId != null">
                account_id = #{accountId,jdbcType=BIGINT},
            </if>
            <if test="coinType != null">
                coin_type = #{coinType,jdbcType=VARCHAR},
            </if>
            <if test="transferAmount != null">
                transfer_amount = #{transferAmount,jdbcType=DECIMAL},
            </if>
            <if test="moneyType != null">
                money_type = #{moneyType,jdbcType=INTEGER},
            </if>
            <if test="init != null">
                init = #{init,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.huobi.quantification.entity.StrategyFinanceHistory">
    update strategy_finance_history
    set exchange_id = #{exchangeId,jdbcType=INTEGER},
      account_id = #{accountId,jdbcType=BIGINT},
      coin_type = #{coinType,jdbcType=VARCHAR},
      transfer_amount = #{transferAmount,jdbcType=DECIMAL},
      money_type = #{moneyType,jdbcType=INTEGER},
      init = #{init,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="getNetBorrow" resultType="java.math.BigDecimal">
        SELECT
        sum(transfer_amount)
        FROM
        strategy_finance_history
        <where>
            exchange_id = #{exchangeId}
            AND account_id = #{accountId}
            AND coin_type = #{coinType}
            <if test="initialOnly == true">
                AND init = '1'
            </if>
        </where>
    </select>
</mapper>