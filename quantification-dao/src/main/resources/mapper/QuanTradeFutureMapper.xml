<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huobi.quantification.dao.QuanTradeFutureMapper">
  <resultMap id="BaseResultMap" type="com.huobi.quantification.entity.QuanTradeFuture">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="exchange_id" jdbcType="INTEGER" property="exchangeId" />
    <result column="symbol" jdbcType="VARCHAR" property="symbol" />
    <result column="contract_type" jdbcType="VARCHAR" property="contractType" />
    <result column="query_id" jdbcType="BIGINT" property="queryId" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from quan_trade_future
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.huobi.quantification.entity.QuanTradeFuture">
    insert into quan_trade_future (id, exchange_id, symbol, 
      contract_type, query_id, type, 
      price, amount, create_date, 
      update_time)
    values (#{id,jdbcType=BIGINT}, #{exchangeId,jdbcType=INTEGER}, #{symbol,jdbcType=VARCHAR}, 
      #{contractType,jdbcType=VARCHAR}, #{queryId,jdbcType=BIGINT}, #{type,jdbcType=VARCHAR}, 
      #{price,jdbcType=DECIMAL}, #{amount,jdbcType=DECIMAL}, #{createDate,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.huobi.quantification.entity.QuanTradeFuture">
    update quan_trade_future
    set exchange_id = #{exchangeId,jdbcType=INTEGER},
      symbol = #{symbol,jdbcType=VARCHAR},
      contract_type = #{contractType,jdbcType=VARCHAR},
      query_id = #{queryId,jdbcType=BIGINT},
      type = #{type,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      amount = #{amount,jdbcType=DECIMAL},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, exchange_id, symbol, contract_type, query_id, type, price, amount, create_date, 
    update_time
    from quan_trade_future
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, exchange_id, symbol, contract_type, query_id, type, price, amount, create_date, 
    update_time
    from quan_trade_future
  </select>
</mapper>