<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huobi.quantification.dao.QuanAccountFuturePositionMapper">
    <resultMap id="BaseResultMap" type="com.huobi.quantification.entity.QuanAccountFuturePosition">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="account_future_id" jdbcType="BIGINT" property="accountFutureId"/>
        <result column="query_id" jdbcType="BIGINT" property="queryId"/>
        <result column="base_coin" jdbcType="VARCHAR" property="baseCoin"/>
        <result column="quote_coin" jdbcType="VARCHAR" property="quoteCoin"/>
        <result column="contract_type" jdbcType="VARCHAR" property="contractType"/>
        <result column="contract_code" jdbcType="VARCHAR" property="contractCode"/>
        <result column="offset" jdbcType="INTEGER" property="offset"/>
        <result column="amount" jdbcType="DECIMAL" property="amount"/>
        <result column="available" jdbcType="DECIMAL" property="available"/>
        <result column="frozen" jdbcType="DECIMAL" property="frozen"/>
        <result column="cost_open" jdbcType="DECIMAL" property="costOpen"/>
        <result column="cost_hold" jdbcType="DECIMAL" property="costHold"/>
        <result column="profit_unreal" jdbcType="DECIMAL" property="profitUnreal"/>
        <result column="profit_rate" jdbcType="DECIMAL" property="profitRate"/>
        <result column="lever_rate" jdbcType="DECIMAL" property="leverRate"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, account_future_id, query_id, base_coin, quote_coin, contract_type, contract_code,
    offset, amount, available, frozen, cost_open, cost_hold, profit_unreal, profit_rate,
    lever_rate, create_time, update_time
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from quan_account_future_position
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from quan_account_future_position
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.huobi.quantification.entity.QuanAccountFuturePosition">
    insert into quan_account_future_position (id, account_future_id, query_id,
      base_coin, quote_coin, contract_type,
      contract_code, offset, amount,
      available, frozen, cost_open,
      cost_hold, profit_unreal, profit_rate,
      lever_rate, create_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{accountFutureId,jdbcType=BIGINT}, #{queryId,jdbcType=BIGINT},
      #{baseCoin,jdbcType=VARCHAR}, #{quoteCoin,jdbcType=VARCHAR}, #{contractType,jdbcType=VARCHAR},
      #{contractCode,jdbcType=VARCHAR}, #{offset,jdbcType=INTEGER}, #{amount,jdbcType=DECIMAL},
      #{available,jdbcType=DECIMAL}, #{frozen,jdbcType=DECIMAL}, #{costOpen,jdbcType=DECIMAL},
      #{costHold,jdbcType=DECIMAL}, #{profitUnreal,jdbcType=DECIMAL}, #{profitRate,jdbcType=DECIMAL},
      #{leverRate,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.huobi.quantification.entity.QuanAccountFuturePosition">
        insert into quan_account_future_position
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="accountFutureId != null">
                account_future_id,
            </if>
            <if test="queryId != null">
                query_id,
            </if>
            <if test="baseCoin != null">
                base_coin,
            </if>
            <if test="quoteCoin != null">
                quote_coin,
            </if>
            <if test="contractType != null">
                contract_type,
            </if>
            <if test="contractCode != null">
                contract_code,
            </if>
            <if test="offset != null">
                offset,
            </if>
            <if test="amount != null">
                amount,
            </if>
            <if test="available != null">
                available,
            </if>
            <if test="frozen != null">
                frozen,
            </if>
            <if test="costOpen != null">
                cost_open,
            </if>
            <if test="costHold != null">
                cost_hold,
            </if>
            <if test="profitUnreal != null">
                profit_unreal,
            </if>
            <if test="profitRate != null">
                profit_rate,
            </if>
            <if test="leverRate != null">
                lever_rate,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="accountFutureId != null">
                #{accountFutureId,jdbcType=BIGINT},
            </if>
            <if test="queryId != null">
                #{queryId,jdbcType=BIGINT},
            </if>
            <if test="baseCoin != null">
                #{baseCoin,jdbcType=VARCHAR},
            </if>
            <if test="quoteCoin != null">
                #{quoteCoin,jdbcType=VARCHAR},
            </if>
            <if test="contractType != null">
                #{contractType,jdbcType=VARCHAR},
            </if>
            <if test="contractCode != null">
                #{contractCode,jdbcType=VARCHAR},
            </if>
            <if test="offset != null">
                #{offset,jdbcType=INTEGER},
            </if>
            <if test="amount != null">
                #{amount,jdbcType=DECIMAL},
            </if>
            <if test="available != null">
                #{available,jdbcType=DECIMAL},
            </if>
            <if test="frozen != null">
                #{frozen,jdbcType=DECIMAL},
            </if>
            <if test="costOpen != null">
                #{costOpen,jdbcType=DECIMAL},
            </if>
            <if test="costHold != null">
                #{costHold,jdbcType=DECIMAL},
            </if>
            <if test="profitUnreal != null">
                #{profitUnreal,jdbcType=DECIMAL},
            </if>
            <if test="profitRate != null">
                #{profitRate,jdbcType=DECIMAL},
            </if>
            <if test="leverRate != null">
                #{leverRate,jdbcType=DECIMAL},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.huobi.quantification.entity.QuanAccountFuturePosition">
        update quan_account_future_position
        <set>
            <if test="accountFutureId != null">
                account_future_id = #{accountFutureId,jdbcType=BIGINT},
            </if>
            <if test="queryId != null">
                query_id = #{queryId,jdbcType=BIGINT},
            </if>
            <if test="baseCoin != null">
                base_coin = #{baseCoin,jdbcType=VARCHAR},
            </if>
            <if test="quoteCoin != null">
                quote_coin = #{quoteCoin,jdbcType=VARCHAR},
            </if>
            <if test="contractType != null">
                contract_type = #{contractType,jdbcType=VARCHAR},
            </if>
            <if test="contractCode != null">
                contract_code = #{contractCode,jdbcType=VARCHAR},
            </if>
            <if test="offset != null">
                offset = #{offset,jdbcType=INTEGER},
            </if>
            <if test="amount != null">
                amount = #{amount,jdbcType=DECIMAL},
            </if>
            <if test="available != null">
                available = #{available,jdbcType=DECIMAL},
            </if>
            <if test="frozen != null">
                frozen = #{frozen,jdbcType=DECIMAL},
            </if>
            <if test="costOpen != null">
                cost_open = #{costOpen,jdbcType=DECIMAL},
            </if>
            <if test="costHold != null">
                cost_hold = #{costHold,jdbcType=DECIMAL},
            </if>
            <if test="profitUnreal != null">
                profit_unreal = #{profitUnreal,jdbcType=DECIMAL},
            </if>
            <if test="profitRate != null">
                profit_rate = #{profitRate,jdbcType=DECIMAL},
            </if>
            <if test="leverRate != null">
                lever_rate = #{leverRate,jdbcType=DECIMAL},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.huobi.quantification.entity.QuanAccountFuturePosition">
    update quan_account_future_position
    set account_future_id = #{accountFutureId,jdbcType=BIGINT},
      query_id = #{queryId,jdbcType=BIGINT},
      base_coin = #{baseCoin,jdbcType=VARCHAR},
      quote_coin = #{quoteCoin,jdbcType=VARCHAR},
      contract_type = #{contractType,jdbcType=VARCHAR},
      contract_code = #{contractCode,jdbcType=VARCHAR},
      offset = #{offset,jdbcType=INTEGER},
      amount = #{amount,jdbcType=DECIMAL},
      available = #{available,jdbcType=DECIMAL},
      frozen = #{frozen,jdbcType=DECIMAL},
      cost_open = #{costOpen,jdbcType=DECIMAL},
      cost_hold = #{costHold,jdbcType=DECIMAL},
      profit_unreal = #{profitUnreal,jdbcType=DECIMAL},
      profit_rate = #{profitRate,jdbcType=DECIMAL},
      lever_rate = #{leverRate,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="selectByBaseCoin" resultMap="BaseResultMap" parameterType="com.huobi.quantification.entity.QuanAccountFuturePosition">
        select
        <include refid="Base_Column_List"/>
        from quan_account_future_position
        where base_coin = #{baseCoin,jdbcType=VARCHAR}
    </select>
</mapper>