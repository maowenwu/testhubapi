<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huobi.quantification.dao.QuanAccountFuturePositionMapper">
  <resultMap id="BaseResultMap" type="com.huobi.quantification.entity.QuanAccountFuturePosition">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="account_future_id" jdbcType="BIGINT" property="accountFutureId" />
    <result column="query_id" jdbcType="BIGINT" property="queryId" />
    <result column="contract_code" jdbcType="VARCHAR" property="contractCode" />
    <result column="contract_name" jdbcType="VARCHAR" property="contractName" />
    <result column="symbol" jdbcType="VARCHAR" property="symbol" />
    <result column="force_liqu_price" jdbcType="DECIMAL" property="forceLiquPrice" />
    <result column="buy_amount" jdbcType="DECIMAL" property="buyAmount" />
    <result column="buy_available" jdbcType="DECIMAL" property="buyAvailable" />
    <result column="buy_price_avg" jdbcType="DECIMAL" property="buyPriceAvg" />
    <result column="buy_price_cost" jdbcType="DECIMAL" property="buyPriceCost" />
    <result column="buy_profit_real" jdbcType="DECIMAL" property="buyProfitReal" />
    <result column="lever_rate" jdbcType="DECIMAL" property="leverRate" />
    <result column="sell_amount" jdbcType="DECIMAL" property="sellAmount" />
    <result column="sell_available" jdbcType="DECIMAL" property="sellAvailable" />
    <result column="sell_price_avg" jdbcType="DECIMAL" property="sellPriceAvg" />
    <result column="sell_price_cost" jdbcType="DECIMAL" property="sellPriceCost" />
    <result column="sell_profit_real" jdbcType="DECIMAL" property="sellProfitReal" />
    <result column="date_create" jdbcType="TIMESTAMP" property="dateCreate" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from quan_account_future_position
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.huobi.quantification.entity.QuanAccountFuturePosition">
    insert into quan_account_future_position (id, account_future_id, query_id, 
      contract_code, contract_name, symbol, 
      force_liqu_price, buy_amount, buy_available, 
      buy_price_avg, buy_price_cost, buy_profit_real, 
      lever_rate, sell_amount, sell_available, 
      sell_price_avg, sell_price_cost, sell_profit_real, 
      date_create)
    values (#{id,jdbcType=BIGINT}, #{accountFutureId,jdbcType=BIGINT}, #{queryId,jdbcType=BIGINT}, 
      #{contractCode,jdbcType=VARCHAR}, #{contractName,jdbcType=VARCHAR}, #{symbol,jdbcType=VARCHAR}, 
      #{forceLiquPrice,jdbcType=DECIMAL}, #{buyAmount,jdbcType=DECIMAL}, #{buyAvailable,jdbcType=DECIMAL}, 
      #{buyPriceAvg,jdbcType=DECIMAL}, #{buyPriceCost,jdbcType=DECIMAL}, #{buyProfitReal,jdbcType=DECIMAL}, 
      #{leverRate,jdbcType=DECIMAL}, #{sellAmount,jdbcType=DECIMAL}, #{sellAvailable,jdbcType=DECIMAL}, 
      #{sellPriceAvg,jdbcType=DECIMAL}, #{sellPriceCost,jdbcType=DECIMAL}, #{sellProfitReal,jdbcType=DECIMAL}, 
      #{dateCreate,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.huobi.quantification.entity.QuanAccountFuturePosition">
    update quan_account_future_position
    set account_future_id = #{accountFutureId,jdbcType=BIGINT},
      query_id = #{queryId,jdbcType=BIGINT},
      contract_code = #{contractCode,jdbcType=VARCHAR},
      contract_name = #{contractName,jdbcType=VARCHAR},
      symbol = #{symbol,jdbcType=VARCHAR},
      force_liqu_price = #{forceLiquPrice,jdbcType=DECIMAL},
      buy_amount = #{buyAmount,jdbcType=DECIMAL},
      buy_available = #{buyAvailable,jdbcType=DECIMAL},
      buy_price_avg = #{buyPriceAvg,jdbcType=DECIMAL},
      buy_price_cost = #{buyPriceCost,jdbcType=DECIMAL},
      buy_profit_real = #{buyProfitReal,jdbcType=DECIMAL},
      lever_rate = #{leverRate,jdbcType=DECIMAL},
      sell_amount = #{sellAmount,jdbcType=DECIMAL},
      sell_available = #{sellAvailable,jdbcType=DECIMAL},
      sell_price_avg = #{sellPriceAvg,jdbcType=DECIMAL},
      sell_price_cost = #{sellPriceCost,jdbcType=DECIMAL},
      sell_profit_real = #{sellProfitReal,jdbcType=DECIMAL},
      date_create = #{dateCreate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select id, account_future_id, query_id, contract_code, contract_name, symbol, force_liqu_price, 
    buy_amount, buy_available, buy_price_avg, buy_price_cost, buy_profit_real, lever_rate, 
    sell_amount, sell_available, sell_price_avg, sell_price_cost, sell_profit_real, date_create
    from quan_account_future_position
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, account_future_id, query_id, contract_code, contract_name, symbol, force_liqu_price, 
    buy_amount, buy_available, buy_price_avg, buy_price_cost, buy_profit_real, lever_rate, 
    sell_amount, sell_available, sell_price_avg, sell_price_cost, sell_profit_real, date_create
    from quan_account_future_position
  </select>
</mapper>