<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.huobi.contract.index.dao.ContractPriceIndexHisMapper">
    <resultMap id="BaseResultMap" type="com.huobi.contract.index.entity.ContractPriceIndexHis">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="exchange_id" property="exchangeId" jdbcType="BIGINT"/>
        <result column="target_symbol" property="targetSymbol" jdbcType="VARCHAR"/>
        <result column="source_symbol" property="sourceSymbol" jdbcType="VARCHAR"/>
        <result column="target_price" property="targetPrice" jdbcType="DECIMAL"/>
        <result column="source_price" property="sourcePrice" jdbcType="DECIMAL"/>
        <result column="rate" property="rate" jdbcType="DECIMAL"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="input_time" property="inputTime" jdbcType="TIMESTAMP"/>
        <result column="origin" property="origin" jdbcType="INTEGER"/>
        <result column="trade_time" property="tradeTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="ContractIndexHiscountMap" type="com.huobi.contract.index.dto.ContractPriceIndexHisCount">
        <result column="exchange_id" property="exchangeId" jdbcType="BIGINT"/>
        <result column="index_symbol" property="indexSymbol" jdbcType="VARCHAR"/>
        <result column="count" property="count" jdbcType="BIGINT"/>
    </resultMap>
    <resultMap id="hisStatusCountMap" type="com.huobi.contract.index.dto.ContractPriceIndexHisStatusCount">
        <result column="exchange_id" property="exchangeId" jdbcType="BIGINT"/>
        <result column="target_symbol" property="targetSymbol" jdbcType="VARCHAR"/>
        <result column="fail_count" property="failCount" jdbcType="BIGINT"/>
        <result column="succ_count" property="succCount" jdbcType="BIGINT"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, exchange_id, target_symbol, source_symbol, target_price, source_price, rate, 
    status, input_time,trade_time
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from contract_price_index_his
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="getBefore100SuccCount" resultType="java.lang.Integer"
            parameterType="com.huobi.contract.index.entity.ContractPriceIndexCalcRecord">
		SELECT
		  count( 1 )
	  FROM
		  ( SELECT STATUS FROM contract_price_index_his h
		  WHERE h.target_symbol = #{targetSymbol} AND h.exchange_id = #{exchangeId}

	  ORDER BY input_time DESC LIMIT 100 ) t
	  WHERE
		  t.STATUS = 1
	  </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from contract_price_index_his
		where id = #{id,jdbcType=BIGINT}
  </delete>
    <select id="getLastSymbolPriceByExchangeAndSymbol" resultMap="BaseResultMap"
            parameterType="com.huobi.contract.index.entity.ContractPriceIndexCalcRecord">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        contract_price_index_his h
        WHERE
        h.target_symbol = #{targetSymbol,jdbcType=VARCHAR}
        AND h.exchange_id = #{exchangeId,jdbcType=BIGINT}
        ORDER BY
        trade_time DESC
        LIMIT 1
    </select>
    <select id="listContractIndexHisCount" resultMap="ContractIndexHiscountMap">
		SELECT
			c.exchange_id,
			c.index_symbol,
            ifnull(count(id),0) as count
		FROM
			exchange_index_weight_conf c
			LEFT JOIN ( SELECT id,exchange_id,target_symbol FROM contract_price_index_his WHERE input_time > #{startTime,jdbcType=VARCHAR} AND origin = #{origin,jdbcType=INTEGER} ) h ON c.exchange_id = h.exchange_id
			AND c.index_symbol = h.target_symbol
		GROUP BY
			c.exchange_id,
			c.index_symbol
	</select>
    <select id="listEffectiveContractIndexHisCount" resultMap="ContractIndexHiscountMap">
		SELECT
			c.exchange_id,
			c.index_symbol,
            ifnull(count(id),0) as count
		FROM
			exchange_index_weight_conf c
			LEFT JOIN ( SELECT id,exchange_id,target_symbol FROM contract_price_index_his WHERE `status` = 1 and input_time > #{startTime,jdbcType=VARCHAR} AND origin = #{origin,jdbcType=INTEGER} ) h ON c.exchange_id = h.exchange_id
			AND c.index_symbol = h.target_symbol
		GROUP BY
			c.exchange_id,
			c.index_symbol
	</select>
    <select id="listContractIndexHisBySymbol" resultMap="BaseResultMap" parameterType="java.lang.String">

    </select>
    <select id="getLastContractPriceIndexHis" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        contract_price_index_his h
        WHERE
        h.target_symbol = #{targetSymbol,jdbcType=VARCHAR}
        AND h.exchange_id = #{exchangeId,jdbcType=BIGINT}
        AND h.origin = #{origin}
        ORDER BY
        trade_time DESC
        LIMIT 1
    </select>
    <select id="selectIndexQualifiedPriceRatio"
            resultType="com.huobi.contract.index.entity.IndexQualifiedPriceRatio">
      select b.exchange_id as exchangeId,b.target_symbol as targetSymbol,IFNULL(a.count,0)/b.count as ratio from
        (SELECT  exchange_id,target_symbol,count(1) as count FROM `contract_price_index_his` where origin= #{origin} and trade_time> #{date,jdbcType=DATE} and `status`=1 GROUP BY exchange_id,target_symbol) as a RIGHT JOIN
        (SELECT exchange_id,target_symbol,count(1) as count FROM `contract_price_index_his` where origin= #{origin} and trade_time> #{date,jdbcType=DATE}  GROUP BY exchange_id,target_symbol) as b
        on a.exchange_id=b.exchange_id and a.target_symbol=b.target_symbol
    </select>
    <insert id="insert" parameterType="com.huobi.contract.index.entity.ContractPriceIndexHis">
    insert into contract_price_index_his (exchange_id, target_symbol,
      source_symbol, target_price, source_price, 
      rate, status, input_time,trade_time,origin
      )
    values (#{exchangeId,jdbcType=BIGINT}, #{targetSymbol,jdbcType=VARCHAR},
      #{sourceSymbol,jdbcType=VARCHAR}, #{targetPrice,jdbcType=DECIMAL}, #{sourcePrice,jdbcType=DECIMAL}, 
      #{rate,jdbcType=DECIMAL}, #{status,jdbcType=INTEGER}, #{inputTime,jdbcType=TIMESTAMP},
        #{tradeTime,jdbcType=TIMESTAMP},#{origin,jdbcType=INTEGER}
      )
  </insert>

    <select id="listIndexHisStatusCount" resultMap="hisStatusCountMap">
		SELECT
			ei.exchange_id,
			ei.index_symbol,
			s.succ_count,
			c.fail_count
		FROM
		(
		SELECT
			e.exchange_id,
			i.index_symbol
		FROM
			exchange_index_weight_conf ec
			LEFT JOIN exchange_info e ON ec.exchange_id = e.exchange_id
			LEFT JOIN index_info i ON ec.index_symbol = i.index_symbol
		WHERE
			i.is_valid = 1
			AND e.is_valid = 1
		) ei
		LEFT JOIN ( SELECT exchange_id, target_symbol, count( 1 ) AS succ_count FROM contract_price_index_his WHERE STATUS = 1
		and trade_time between #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR}
		GROUP BY exchange_id, target_symbol ) s ON ei.exchange_id = s.exchange_id
		AND ei.index_symbol = s.target_symbol
		LEFT JOIN ( SELECT exchange_id, target_symbol, count( 1 ) AS fail_count FROM contract_price_index_his WHERE STATUS = 0
		and trade_time between #{startTime,jdbcType=VARCHAR} and #{endTime,jdbcType=VARCHAR}
		GROUP BY exchange_id, target_symbol ) c ON ei.exchange_id = c.exchange_id
		AND ei.index_symbol = c.target_symbol
	</select>

    <insert id="insertSelective" parameterType="com.huobi.contract.index.entity.ContractPriceIndexHis" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into contract_price_index_his
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="exchangeId != null">
                exchange_id,
            </if>
            <if test="targetSymbol != null">
                target_symbol,
            </if>
            <if test="sourceSymbol != null">
                source_symbol,
            </if>
            <if test="targetPrice != null">
                target_price,
            </if>
            <if test="sourcePrice != null">
                source_price,
            </if>
            <if test="rate != null">
                rate,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="tradeTime != null">
                trade_time,
            </if>
            <if test="inputTime != null">
                input_time,
            </if>
            <if test="origin != null">
                origin,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="exchangeId != null">
                #{exchangeId,jdbcType=BIGINT},
            </if>
            <if test="targetSymbol != null">
                #{targetSymbol,jdbcType=VARCHAR},
            </if>
            <if test="sourceSymbol != null">
                #{sourceSymbol,jdbcType=VARCHAR},
            </if>
            <if test="targetPrice != null">
                #{targetPrice,jdbcType=DECIMAL},
            </if>
            <if test="sourcePrice != null">
                #{sourcePrice,jdbcType=DECIMAL},
            </if>
            <if test="rate != null">
                #{rate,jdbcType=DECIMAL},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="tradeTime != null">
                #{tradeTime,jdbcType=TIMESTAMP},
            </if>
            <if test="inputTime != null">
                #{inputTime,jdbcType=TIMESTAMP},
            </if>
            <if test="origin != null">
                #{origin,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <insert id="insertBatch" parameterType="java.util.List">
        INSERT INTO contract_price_index_his (
        `exchange_id`,
        `target_symbol`,
        `source_symbol`,
        `target_price`,
        `source_price`,
        `rate`,
        `status`,
        `trade_time`,
        `input_time`,
        `origin`
        )
        VALUES
        <foreach collection="hisList" item="item" separator=",">
            (
            #{item.exchangeId},
            #{item.targetSymbol},
            #{item.sourceSymbol},
            #{item.targetPrice},
            #{item.sourcePrice},
            #{item.rate},
            #{item.status},
            #{item.tradeTime,jdbcType=TIMESTAMP},
            #{item.inputTime,jdbcType=TIMESTAMP},
            #{item.origin}
            )
        </foreach>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.huobi.contract.index.entity.ContractPriceIndexHis">
        update contract_price_index_his
        <set>
            <if test="exchangeId != null">
                exchange_id = #{exchangeId,jdbcType=BIGINT},
            </if>
            <if test="targetSymbol != null">
                target_symbol = #{targetSymbol,jdbcType=VARCHAR},
            </if>
            <if test="sourceSymbol != null">
                source_symbol = #{sourceSymbol,jdbcType=VARCHAR},
            </if>
            <if test="targetPrice != null">
                target_price = #{targetPrice,jdbcType=DECIMAL},
            </if>
            <if test="sourcePrice != null">
                source_price = #{sourcePrice,jdbcType=DECIMAL},
            </if>
            <if test="rate != null">
                rate = #{rate,jdbcType=DECIMAL},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="inputTime != null">
                input_time = #{inputTime,jdbcType=TIMESTAMP},
            </if>
            <if test="tradeTime != null">
                trade_time = #{tradeTime,jdbcType=TIMESTAMP},
            </if>
            <if test="origin != null">
                origin = #{inputTime,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.huobi.contract.index.entity.ContractPriceIndexHis">
    update contract_price_index_his
    set exchange_id = #{exchangeId,jdbcType=BIGINT},
      target_symbol = #{targetSymbol,jdbcType=VARCHAR},
      source_symbol = #{sourceSymbol,jdbcType=VARCHAR},
      target_price = #{targetPrice,jdbcType=DECIMAL},
      source_price = #{sourcePrice,jdbcType=DECIMAL},
      rate = #{rate,jdbcType=DECIMAL},
      status = #{status,jdbcType=INTEGER},
      input_time = #{inputTime,jdbcType=TIMESTAMP},
      trade_time= #{tradeTime,jdbcType=TIMESTAMP},
      origin = #{origin,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>